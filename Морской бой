from random import randint

class Dot:        # Точка на доске (информация о координатах)
    def __init__(self, x, y):
        self.x = x
        self.y = y
    # Равенство точек
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
    def __repr__(self):
        return f'({self.x}, {self.y})'
class BoardException(Exception):
    pass

class BoardOutException(BoardException):
    def __str__(self):
        return ' Вы пытаетесь выстрелить за доску! '

class BoardUsedException(BoardException):
    def __str__(self):
        return ' Вы уже стреляли в эту клетку '

class BoardWrongShipException(BoardException):
    pass

# Класс корабля
class Ship:
    def __init__(self, bow, l, o):
        self.bow = bow
        self.l = l
        self.o = o
        self.lives = l
    # Метод (расположение точек корабля)
    @property
    def dots(self):
        ship_dots = []
        for i in range(self.l):
            cur_x = self.bow.x
            cur_y = self.bow.y
            if self.o == 0:
                cur_x += i
            elif self.o == 1:
                cur_y += i
            ship_dots.append(Dot(cur_x, cur_y))
        return ship_dots
    # Проверяем попадания
    def shooten(self, shot):
        return shot in self.dots

# Класс игровой доски
class Board:
    def __init__(self, hid=False, size=6):
        self.size = size
        self.hid = hid
        self.count = 0 #Подсчет уничтоженных кораблей
        self.field = [['O'] * size for _ in range(size)]
        self.busy = [] #Уже занятые точки
        self.ships = [] #Корабли на месте
    # Ставит корабль на поле
    def add_ship(self, ship):
        for d in ship.dots:
            if self.out(d) or d in self.busy: #Проверка
                raise BoardWrongShipException()
        for d in ship.dots:
            self.field[d.x][d.y] = '■'
            self.busy.append(d)
        self.ships.append(ship)
        self.contour(ship)
    # Контур коробля
    def contour(self, ship, verb=False):
        near = [
            (-1, -1), (-1, 0), (-1, 1), #Все соседние клетки
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]
        for d in ship.dots:
            for dx, dy in near: #Распаковка координат
                cur = Dot(d.x + dx, d.y + dy)
                if not (self.out(cur)) and cur not in self.busy: #Проверка вокруг корабля
                    if verb:
                        self.field[cur.x][cur.y] = '.'
                    self.busy.append(cur)
    # Вывод поля
    def __str__(self):
        res = ' '
        res += ' I 1 I 2 I 3 I 4 I 5 I 6 I'
        for i, row in enumerate(self.field):
            res += f'\n{i + 1} I ' + ' I '.join(row) + ' I'
        # Прячем корабли
        if self.hid:
            res = res.replace('■', 'O')
        return res
    def out(self, d):
        return not ((0 <= d.x < self.size) and (0 <= d.y < self.size))
    def shot(self, d):
        if self.out(d):
            raise BoardOutException()
        if d in self.busy:
            raise BoardUsedException()
        self.busy.append(d)
        for ship in self.ships:
            if d in ship.dots:
                ship.lives -= 1
                self.field[d.x][d.y] = 'X'
                if ship.lives == 0:
                    self.count += 1
                    self.contour(ship, verb=True)
                    print(' Корабль уничтожен! ')
                    return False
                else:
                    print(' Корабль ранен! ')
                    return True
        self.field[d.x][d.y] = '.'
        print(' Мимо! ')
        return False
    def begin(self):
        self.busy = [] #Обнуление


class Player:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy
    def ask(self):
        raise NotImplementedError()
    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)

class AI(Player):
    def ask(self):
        d = Dot(randint(0, 5), randint(0, 5))
        print(f' Ход компьютера: {d.x + 1} {d.y + 1}')
        return d

class User(Player):
    def ask(self):
        while True:
            cords = input(' Ваш ход: ').split()
            if len(cords) != 2:
                print(' Введите 2 координаты! ')
                continue
            x, y = cords
            if not (x.isdigit()) or not (y.isdigit()):
                print(' Введите числа! ')
                continue
            x, y = int(x), int(y)
            return Dot(x - 1, y - 1)

class Game:
    def __init__(self, size=6):
        self.size = size
        pl = self.random_board()
        co = self.random_board()
        co.hid = True
        self.ai = AI(co, pl)
        self.us = User(pl, co)
    def random_board(self):
        board = None
        while board is None:
            board = self.random_place()
        return board
    def random_place(self):
        lens = [3, 2, 2, 1, 1, 1, 1]
        board = Board(size=self.size)
        attempts = 0
        for l in lens:
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), l, randint(0, 1))
                try:
                    board.add_ship(ship)
                    break
                except BoardWrongShipException:
                    pass
        board.begin()
        return board
    def greet(self):
        print(' _______________________ ')
        print(' Приветствуем в игре морской бой! ')
        print(' формат ввода: x y ')
        print(' x - строка  ')
        print(' y - столбец ')
        print(' Корабли расставляются рандомно ')
    def loop(self):
        num = 0
        while True:
            print(' - ' * 20)
            print(' Доска игрока: ')
            print(self.us.board)
            print(' - ' * 20)
            print(' Доска компьютера: ')
            print(self.ai.board)
            if num % 2 == 0:
                print(' - ' * 20)
                print(' Ходит игрок! ')
                repeat = self.us.move()
            else:
                print(' - ' * 20)
                print(' Ходит компьютер! ')
                repeat = self.ai.move()
            if repeat:
                num -= 1
            if self.ai.board.count == 7:
                print(' - ' * 20)
                print(' Игрок победил! ')
                break
            if self.us.board.count == 7:
                print(' - ' * 20)
                print(' Игрок проиграл! ')
                break
            num += 1
    def start(self):
        self.greet()
        self.loop()

g = Game()
g.start()
